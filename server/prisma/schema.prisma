// EmailCraft AI Prisma Schema
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model - Stores user account information
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String   // Hashed with bcrypt
  firstName String?
  lastName  String?
  isActive  Boolean  @default(true)
  
  // Subscription and billing
  subscriptionTier String   @default("free") // free, pro, enterprise
  tokensUsed       Int      @default(0)      // AI tokens used this month
  tokenLimit       Int      @default(100)    // Monthly token limit
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?
  
  // Relations
  templates       Template[]
  userPreferences UserPreferences?
  apiTokens       ApiToken[]
  
  @@map("users")
}

// User Preferences - User settings and preferences
model UserPreferences {
  id     String @id @default(uuid())
  userId String @unique
  
  // UI Preferences
  theme            String  @default("light") // light, dark
  defaultEmailType String  @default("newsletter") // newsletter, promotional, transactional
  autoSave         Boolean @default(true)
  
  // AI Preferences
  preferredModel String @default("claude") // claude, gpt-4, etc.
  creativity     Float  @default(0.7) // 0.0 to 1.0
  
  // Email Preferences
  defaultFromName  String?
  defaultFromEmail String?
  defaultSubject   String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_preferences")
}

// Template Model - Stores generated email templates
model Template {
  id          String  @id @default(uuid())
  userId      String
  title       String
  description String?
  
  // Template Content
  prompt      String    // Original user prompt
  htmlContent String    // Generated HTML
  cssContent  String?   // Extracted CSS
  subject     String?   // Email subject line
  previewText String?   // Email preview text
  
  // Template Metadata
  templateType String   @default("newsletter") // newsletter, promotional, transactional, announcement
  industry     String?  // e-commerce, tech, healthcare, etc.
  
  // AI Generation Info
  aiModel      String   @default("claude") // AI model used
  aiVersion    String?  // Model version
  tokensUsed   Int      @default(0)
  
  // Template Status and Usage
  isPublic     Boolean  @default(false)
  isFavorite   Boolean  @default(false)
  isArchived   Boolean  @default(false)
  usageCount   Int      @default(0) // How many times exported/used
  
  // Email Client Compatibility
  isResponsive     Boolean @default(true)
  compatibilityScore Float? // 0.0 to 1.0 across email clients
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  versions  TemplateVersion[]
  exports   TemplateExport[]
  tags      TemplateTags[]
  
  @@map("templates")
  @@index([userId])
  @@index([templateType])
  @@index([isPublic])
  @@index([createdAt])
}

// Template Version - Version control for templates
model TemplateVersion {
  id         String @id @default(uuid())
  templateId String
  version    Int    // Version number (1, 2, 3, etc.)
  
  // Version Content
  htmlContent String
  cssContent  String?
  subject     String?
  previewText String?
  
  // Version Metadata
  changeLog   String? // What changed in this version
  isActive    Boolean @default(false) // Only one active version per template
  
  // Timestamps
  createdAt DateTime @default(now())
  
  // Relations
  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@map("template_versions")
  @@unique([templateId, version])
  @@index([templateId])
}

// Template Export - Track exports and integrations
model TemplateExport {
  id         String @id @default(uuid())
  templateId String
  
  // Export Details
  exportType   String    // html, mailchimp, sendgrid, convertkit, etc.
  exportFormat String    // file, api, integration
  
  // Integration Details
  integrationId String? // External integration ID
  platformData  Json?   // Platform-specific data
  
  // Export Status
  status       String    @default("completed") // pending, completed, failed
  errorMessage String?
  
  // Timestamps
  createdAt DateTime @default(now())
  
  // Relations
  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@map("template_exports")
  @@index([templateId])
  @@index([exportType])
  @@index([createdAt])
}

// Template Tags - Tagging system for organization
model TemplateTags {
  id         String @id @default(uuid())
  templateId String
  tagName    String
  
  // Timestamps
  createdAt DateTime @default(now())
  
  // Relations
  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@map("template_tags")
  @@unique([templateId, tagName])
  @@index([tagName])
}

// API Token - For external API access
model ApiToken {
  id     String @id @default(uuid())
  userId String
  
  // Token Details
  name        String   // Human-readable name
  token       String   @unique // Hashed API token
  permissions String[] // Array of permissions: read, write, admin
  
  // Token Status
  isActive  Boolean   @default(true)
  lastUsed  DateTime?
  expiresAt DateTime? // Optional expiration
  
  // Usage Tracking
  usageCount    Int @default(0)
  rateLimitHour Int @default(1000) // Requests per hour
  rateLimitDay  Int @default(10000) // Requests per day
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_tokens")
  @@index([userId])
  @@index([token])
}

// System Analytics - Track system-wide metrics
model Analytics {
  id   String @id @default(uuid())
  date DateTime @default(now()) @db.Date
  
  // Usage Metrics
  totalUsers         Int @default(0)
  activeUsers        Int @default(0)
  templatesGenerated Int @default(0)
  templatesExported  Int @default(0)
  tokensUsed         Int @default(0)
  
  // Performance Metrics
  avgGenerationTime Float? // Average time to generate template
  errorRate         Float? // Percentage of failed generations
  
  // Revenue Metrics
  subscriptionRevenue Float @default(0)
  newSubscriptions    Int   @default(0)
  churnedSubscriptions Int  @default(0)
  
  @@map("analytics")
  @@unique([date])
}